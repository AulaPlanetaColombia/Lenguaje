%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.2%%For: (MacProUser01) ()%%Title: (BeardMan01-R1.eps)%%CreationDate: 12/5/12 10:07 PM%%BoundingBox: 37 -1002 722 -13%%HiResBoundingBox: 37.2808 -1001.7842 721.0488 -13.3599%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%RGBProcessColor: 0.784314 0.917647 0.960784 (R=200 G=234 B=245)%%+ 0.87451 0.698039 0.545098 (R=223 G=178 B=139)%%+ 0.921569 0.756863 0.611765 (R=235 G=193 B=156)%%+ 0.356863 0.188235 0.129412 (R=91 G=48 B=33)%%+ 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 396.5 -504.5 396.5 -504.5%AI3_TileBox: 108 -860 684 -126%AI3_DocumentPreview: Header%AI5_ArtSize: 792 1008%AI5_RulerUnits: 0%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 3%AI8_OpenToView: -453 381 0.5 975 943 18 1 0 73 75 0 0%AI5_OpenViewLayers: 777%%PageOrigin:-198 -1052%AI7_GridSettings: 72 1 72 1 1 0 1 0.29 1 1 0.65 1%AI9_Flatten: 1%AI12_CMSettings: 00.MS%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Artlandia LivePresets class) (Artlandia LivePresets Plug-in) (Artlandia LivePresets.aip)%AI8_PluginGroupInfo(UnitCell class) (Artlandia SymmetryWorks Plug-in) (Artlandia SymmetryWorks.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs([Registration])Pc0 g(K=100)Pc0.121569 0.309804 0.470588 0 0.87451 0.698039 0.545098 (R=223 G=178 B=139) 0 1 Xk(R=223 G=178 B=139)Pc0.411765 0.74902 0.807843 0.529412 0.356863 0.188235 0.129412 (R=91 G=48 B=33) 0 1 Xk(R=91 G=48 B=33)Pc0 0 0 0 1 1 1 Xa(R=255 G=255 B=255)Pc0.070588 0.25098 0.392157 0 0.921569 0.756863 0.611765 (R=235 G=193 B=156) 0 1 Xk(R=235 G=193 B=156)Pc0.2 0 0.023529 0 0.784314 0.917647 0.960784 (R=200 G=234 B=245) 0 1 Xk(R=200 G=234 B=245)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 2 79 255 79 0 50 Lb(Background) Ln0 A0 O0.2 0 0.023529 0 0.784314 0.917647 0.960784 (R=200 G=234 B=245) 0 1 Xk0 J 0 j 1 w 4 M []0 d1 XR214.1953 -692.9473 m214.1997 -702.3105 213.7007 -711.7041 214.3604 -720.4209 c215.8965 -740.7246 219.5815 -759.7451 215.8975 -780.2031 c211.7896 -803.0146 207.415 -829.2793 225.749 -846.7822 c250.6147 -870.5205 293.7495 -863.0605 323.7021 -875.9863 c335.542 -881.0957 353.5332 -883.8408 363.0391 -893.3984 c384.8086 -915.2871 360.2793 -933.5547 360.4766 -958.8467 c360.8242 -1003.3994 442.3877 -999.293 475.0459 -1001 c533.8047 -1004.0703 585.248 -997.999 642.9111 -984.9434 c675.9541 -977.4609 707.4141 -969.5723 711 -932.8896 c713.5645 -906.6523 715.9668 -880.3779 702.9932 -856.5156 c688.2695 -829.4365 671.9629 -812.8184 667.4912 -780.8896 c663.1924 -750.1963 671.1934 -714.5791 681.4375 -684.9395 c703.458 -621.2324 695.2363 -554.1709 705.3984 -488.8965 c710.833 -453.9922 720.6641 -423.2886 721.0391 -387.1997 c721.2402 -367.853 718.1738 -348.2842 717.4453 -329.1035 c716.6475 -308.1084 709.7959 -292.6714 706.9033 -272.5552 c702.4688 -241.7036 710.0879 -207.3721 709.4453 -176.6724 c708.75 -143.5132 703.5381 -110.6675 693 -79.0532 c683.8184 -51.5073 667.8682 -31.6772 638.9463 -28.562 c612.8145 -25.7476 590.5234 -22.8081 564.9033 -17.4448 c529.3877 -10.0103 487.543 -14.9946 451.1094 -15 c416.2148 -15.0049 382.8101 -18.5552 348.9678 -27.5483 c314.3066 -36.7593 289.1504 -48.7896 268.5049 -79.1035 c241.522 -118.7227 229.8975 -161.293 217.0571 -206.9468 c210.9312 -228.7261 214.4199 -239.5264 217.0962 -261 c218.4531 -271.8838 225.2227 -297.4653 223.0786 -307.064 c217.6064 -331.5615 171.5361 -356.7808 151.498 -371 c114.3257 -397.3779 61.1411 -426.7603 45.498 -471.4448 c36.1685 -498.0952 32.667 -546.8008 46.4517 -572.5547 c65.8066 -608.7178 114.3906 -630.7881 151.9243 -636.9961 c170.8247 -640.1221 197.125 -637.834 207.5835 -657.3867 c213.293 -668.0723 214.1899 -680.4824 214.1953 -692.9473 cfLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 1 255 79 79 0 50 Lb(Color) Ln0 A0 O0.070588 0.25098 0.392157 0 0.921569 0.756863 0.611765 (R=235 G=193 B=156) 0 1 Xk0 J 0 j 1 w 4 M []0 d1 XR201.1001 -390.0967 m182.3179 -389.332 159.9551 -403.3652 143.5669 -410.9648 c114.1484 -424.606 90.5854 -439.9468 70.6069 -466.5933 c43.9668 -502.1245 38.8403 -557.4189 94.6055 -570.0879 c149.5146 -582.5625 188.0239 -597.2813 242.7017 -584.3711 C250.0532 -601.6992 252.1084 -611.7236 254.0088 -633.1729 c256.7441 -664.0479 254.521 -694.2002 250.9365 -724.585 c241.5449 -804.2002 404.0586 -791.3662 448.4336 -793.8037 C449.4639 -810.71 458.8477 -825.374 463.5039 -841.7559 c468.6182 -859.7441 468.3535 -881.6631 479.9316 -896.7666 C467.5977 -896.7607 423.6787 -909.8105 418.8164 -921.4814 c409.3125 -944.2939 449.9902 -980.8574 467.6465 -986.835 c519.8145 -1004.4971 574.0537 -965.9863 619.9902 -947.7705 c637.3164 -940.8994 696.9814 -907.7334 659.0127 -895.1953 c645.6309 -890.7764 627.6475 -891.8223 620.6436 -877.2383 c616.5244 -868.6602 617.1797 -849.416 616.502 -839.7695 c613.3828 -795.4375 625.7178 -752.9102 628.5791 -709.5039 c632.6631 -647.5547 634.9404 -585.9746 643.5781 -525.0947 c645.7402 -509.8535 647.0254 -495.5425 653.666 -482.7158 c663.1133 -464.4692 680.1904 -450.7578 686.7373 -430.2612 c695.6182 -402.4546 694.1953 -359.1421 691.6777 -330.4473 c687.3887 -281.5488 670.5957 -229.9512 655.542 -183.4409 c640.1719 -135.9487 587.1221 -105.8228 540.4648 -93.0718 c513.1045 -85.5942 483.4365 -79.1489 454.8574 -81.0454 c434.5098 -82.3955 417.5674 -92.0776 399.0605 -99.5146 c356.2427 -116.7202 337.5024 -152.3574 319.6665 -191.6558 c302.5151 -229.4453 299.6655 -268.3916 304.5898 -309.4722 c307.5791 -334.4092 201.1001 -390.0967 yf0.121569 0.309804 0.470588 0 0.87451 0.698039 0.545098 (R=223 G=178 B=139) 0 1 Xk454 -943 m452 -940 448 -934 450 -929 C453 -924 452 -918 456 -916 C478 -902 505 -907 527 -894 C513 -890 501 -883 493 -871 c486 -861 495 -849 503 -839 C505 -836 504 -832 503 -828 C499 -829 500 -825 499 -824 C492 -815 501 -809 508 -805 C534 -792 570 -777 579 -747 C575 -747 571 -746 567 -748 c527.8047 -766.1357 490.3164 -789.3955 450.9395 -807.3867 C454.3027 -818.9434 460.1348 -829.9014 463.5039 -841.7559 c468.6182 -859.7441 468.3535 -881.6631 479.9316 -896.7666 C467.5977 -896.7607 423.6787 -909.8105 418.8164 -921.4814 c409.3125 -944.2939 449.9902 -980.8574 467.6465 -986.835 c475.5352 -989.5059 483.4707 -990.8848 491.4189 -991.251 C475.749 -978.4971 463.3389 -961.0938 454 -943 Cf112 -513 m115 -499 120 -485 128 -474 c175 -407 249 -377 318 -341 c326 -337 317 -317 325 -307 C337 -293 348 -278 365 -269 C357 -264 351 -258 346 -250 C334 -235 326 -219 322 -200 C321.1987 -196.7954 320.6187 -193.5913 320.2456 -190.3867 C320.0527 -190.8101 319.8589 -191.2314 319.6665 -191.6558 c302.5151 -229.4453 299.6655 -268.3916 304.5898 -309.4722 c307.5791 -334.4092 201.1001 -390.0967 Y182.3179 -389.332 159.9551 -403.3652 143.5669 -410.9648 c114.1484 -424.606 90.5854 -439.9468 70.6069 -466.5933 c43.9668 -502.1245 38.8403 -557.4189 94.6055 -570.0879 c106.9414 -572.8906 119.1577 -574.6533 131.3062 -575.5684 C124.5522 -568.5078 118.9702 -560.3584 115 -551 c110 -539 109 -526 112 -513 cf0.411765 0.74902 0.807843 0.529412 0.356863 0.188235 0.129412 (R=91 G=48 B=33) 0 1 Xk282.0962 -292.6016 m265.874 -253.5454 273.5811 -196.5635 280.9297 -156.4849 c289.9727 -107.1665 337.9653 -70.4229 382.519 -51.1245 c434.0391 -28.8086 490.8848 -25.0625 546.335 -27.043 c582.4512 -28.333 623.7295 -44.8525 643.5732 -76.5352 c673.1094 -123.6938 683.5967 -186.1323 692.7422 -240.4385 c701.499 -292.4434 700.9932 -352.5044 695.7363 -405.0532 c692.1113 -441.2871 674.5186 -469.4624 654.1172 -497.4536 C642.123 -488.3369 638.6309 -485.4463 645.001 -473.8286 c653.0439 -459.1587 663.8779 -450.0767 669.3711 -433.5947 c676.6748 -411.6772 688.0273 -374.2188 676.3145 -351.104 c663.2256 -325.2744 620.7705 -293.2178 593.7813 -317.9507 c578.127 -332.2969 582.2314 -366.0679 582.0811 -385.103 c581.876 -411.126 580.9082 -437.5635 582.0039 -463.5586 c583.5469 -500.1831 583.168 -536.9883 578.8564 -572.9658 C553.0645 -555.4873 559.084 -506.0684 556.8027 -479.4263 c552.9248 -434.1328 534.9023 -389.7769 543.2959 -343.8892 c548.0703 -317.792 537.7383 -317.1211 518.0205 -304.6445 c501.4805 -294.1777 485.4014 -273.7852 477.6094 -255.8091 c468.1025 -233.877 472.209 -208.542 493.5889 -195.3979 C475.8906 -177.2402 449.3672 -170.2266 433.584 -148.793 C420.2949 -156.1489 408.6143 -167.3325 393.2378 -172.5703 c369.8472 -180.5381 351.6865 -174.415 329.4443 -184.8887 C333.5688 -182.9463 326.6631 -205.7173 326.3862 -208.0762 c325.2075 -218.1216 320.0366 -227.2969 315.729 -236.2178 c307.0439 -254.2051 301.792 -276.7822 289.5957 -292.6016 c282.0962 -292.6016 Lf0 0 0 0 1 1 1 Xa333.3379 -316.1411 m329.3701 -316.1382 321.3281 -320.2104 323.8735 -325.1157 c326.2319 -329.6597 334.2451 -329.9902 337.8237 -327.8208 c339.9434 -326.5361 344.7236 -323.1006 344.9033 -320.5269 c345.1719 -316.6826 340.8662 -316.9004 337.8252 -316.5898 c333.3379 -316.1411 lf419.4941 -304.0254 m415.2549 -304.957 408.6484 -306.895 405.2041 -309.501 c399.8604 -313.5444 404.4824 -319.2095 409.1299 -321.8716 c418.3955 -327.1797 429.9258 -319.8218 437.9824 -315.6924 c442.1826 -313.5396 453.4072 -308.168 445.9805 -302.5562 c441.6934 -299.3174 429.001 -300.1021 424.4307 -302.2305 c419.4941 -304.0254 lf*u1 D0.411765 0.74902 0.807843 0.529412 0.356863 0.188235 0.129412 (R=91 G=48 B=33) 0 1 Xk500.5811 -761.8066 m496.8906 -739.4795 474.8623 -722.7363 462.7461 -704.7744 c444.5391 -677.7822 434.4688 -650.3691 421.7246 -621.5557 c413.4014 -602.7383 389.582 -591.4736 370.5776 -586.2471 c351.7588 -581.0723 329.5732 -580.8408 310.6133 -585.1719 c301.4478 -587.2646 258.2578 -601.2373 259.4443 -609.333 C260.5557 -627.1113 L255.0327 -635.8057 259.0303 -653.1348 259.4443 -663.7773 c259.9985 -678.0254 262.792 -690.9531 262.7778 -705.0742 c262.7671 -715.8135 262.7104 -725.8008 260.5298 -736 c258.0645 -747.5322 252.0679 -753.5244 246.4414 -763.7773 c232.2329 -789.6709 252.1953 -800.4053 276.1392 -803.5303 c289.7295 -805.3037 303.2144 -806.5273 315 -814.0537 c325.9868 -821.0703 335.2925 -830.3125 346.3369 -837.3623 c389.6201 -864.9922 457.1025 -859.2656 486.4414 -813.752 c495.9482 -799.0039 503.5693 -779.8838 500.5811 -761.8066 cf0 D409 -740 m391.1865 -731.9033 373.6313 -744.5527 357.8428 -751.2891 c350.8809 -754.2598 344.165 -755.958 336.7441 -753.665 c329.7617 -751.5068 323.5107 -747.4521 317.0537 -744.1377 c310.3188 -740.6807 302.1035 -738.5488 294.8467 -742.2012 c291.0952 -744.0889 288.1675 -747.1807 285.4429 -750.3105 c283.2368 -752.8428 280.1758 -754.9961 279.0254 -758.2725 C277.1943 -753.0742 277.0923 -746.6641 276.3262 -741.2344 c275.4238 -734.8369 274.5859 -728.4316 273.812 -722.0176 c272.2852 -709.3633 271.2676 -696.6777 270 -684 c269 -674 266 -665 264 -655 c259.7314 -633.6563 277.4761 -616.3564 297.4014 -613.4385 c316.6968 -610.6133 336.9312 -616.6543 351.7793 -628.832 c366.3745 -640.8018 378.79 -655.5381 387.2603 -672.4424 c391.8086 -681.5186 396.0107 -691.2852 399 -701 c403 -714 410 -726 409 -740 Cf*U0.121569 0.309804 0.470588 0 0.87451 0.698039 0.545098 (R=223 G=178 B=139) 0 1 Xk642.1846 -388.0708 m616.3047 -372.3335 620.6006 -428.0015 605.0068 -412.5532 C610.9307 -400.3203 614.0576 -392.333 611.3428 -379.0059 c609.1953 -368.4668 603.0742 -363.6763 611.5156 -354.0874 c641.5176 -320.0078 637.9297 -385.4834 642.1846 -388.0708 Cf399.4893 -362.043 m420.3906 -375.5391 437.2197 -375.3267 461.9902 -376.9009 C458.5986 -376.6855 447.2803 -385.8662 443.0801 -387.2139 c435.6504 -389.5977 426.7656 -390.8589 419.0244 -389.6411 c412.2402 -388.5732 403.9971 -385.6714 399.4209 -380.2119 c395.2588 -375.2236 396.3369 -366.9961 399.4893 -362.043 Cf402.1445 -323.9819 m401.6836 -337.3657 446.8955 -334.5195 449.8643 -325.7134 C436.2451 -321.5996 419.5283 -330.3174 406.5371 -326.1787 c402.1445 -323.9819 lf292.0254 -562.3369 m283.7388 -560.1787 246.6426 -571.2588 253.4692 -580.9102 c258.2495 -587.668 281.0518 -581.4219 286.689 -580.3223 c293.4043 -579.0127 300.0786 -577.9717 306.8496 -577.042 c310.8965 -576.4863 321.373 -576.5381 324.3599 -573.8691 c334.6948 -564.6338 303.3013 -563.4346 298.0659 -563.4346 c292.0254 -562.3369 lf306.5679 -723.8145 m314.0264 -723.75 319.7344 -714.877 321.8975 -709.0313 C314.1455 -708.4688 306.6543 -708.5342 299.5625 -704.9697 c294.873 -702.6123 289.9941 -698.8945 284.707 -698.5947 C282.4653 -708.8184 296.771 -723.8994 306.5679 -723.8145 cf277.9971 -641.3799 m280.8604 -638.4795 284.1763 -646.9961 286.4097 -649.5732 C288.3999 -648.1641 289.7754 -645.8955 291.7627 -644.7402 C296.043 -650.7646 290.9136 -653.2422 286.6768 -657.1768 c278.0029 -665.2314 271.9072 -647.5576 277.9971 -641.3799 cfLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Black Outline) Ln0 Au0 O0 g0 J 0 j 1 w 4 M []0 d1 XR448.2021 -123.6416 m450.6182 -124.9941 452.5625 -126.8174 454.9844 -128.1631 C466.9688 -147.5059 480.9316 -164.8691 504.8818 -172.2461 C506.2217 -172.3018 507.0879 -172.4141 508.2725 -172.085 C507.4971 -172.9785 505.5264 -172.6758 503.9131 -172.7314 C477.793 -167.2539 463.2051 -150.2471 451.4316 -130.4238 C437.8887 -143.4707 422.9346 -156.5049 403.1504 -163.8496 C393.1973 -167.5684 383.1514 -171.1943 371.8232 -173.5381 C361.4941 -175.4297 343.7803 -177.7373 338.0742 -170.6318 C341.1152 -171.3691 344.1855 -173.4482 348.5703 -173.377 C393.665 -168.9521 426.1045 -151.8691 448.8486 -125.0947 C448.6563 -124.5869 448.3037 -124.2412 448.2021 -123.6416 Cf565.7588 -537.6719 m557.9512 -498.5444 549.5537 -460.0054 548.6426 -413.98 C547.8486 -392.1167 546.6211 -368.7617 546.3818 -345.8364 c546.1494 -323.585 542.9932 -296.8545 553.8096 -283.8281 C533.6035 -281.5889 522.4355 -270.3096 513.4404 -256.8613 C504.6709 -246.1465 499.3066 -217.6465 510.21 -205.0264 C510.3281 -204.6982 510.6963 -204.3672 511.0176 -204.7041 C501.6162 -218.8311 507.6172 -245.8613 516.5078 -256.5381 C521.0146 -263.2813 526.7344 -268.8115 533.3018 -273.4932 C536.8096 -275.583 540.1582 -277.833 544.7666 -278.8223 C548.7334 -280.4541 555.2266 -279.5586 558.4922 -281.8906 C557.5586 -286.125 553.7295 -288.8594 552.3564 -293.1934 C550.7588 -297.4639 550.1162 -302.6875 549.6113 -308.0503 C549.2939 -342.8203 551.1211 -376.835 552.3564 -410.5889 C552.8018 -456.8647 563.0576 -494.1899 565.7588 -537.6719 Cf415.2617 -228.4404 m399.1592 -230.1553 378.2178 -227.0313 367.4639 -234.0928 C359.2666 -235.709 355.1514 -230.6299 348.0859 -230.0557 C341.2705 -229.4922 336.6289 -231.9365 330.1621 -231.1855 C336.1611 -230.3496 340.4492 -227.8018 346.6328 -227.1494 C354.3242 -226.4551 357.9189 -229.8574 364.7188 -230.0557 C368.9941 -228.5186 372.3662 -226.0771 377.6367 -225.5342 C391.3496 -225.332 403.2734 -226.918 415.2617 -228.4404 Cf437.0605 -247.8184 m423.0928 -247.2676 406.7129 -246.5107 391.8467 -247.334 C383.9336 -247.1719 377.9072 -248.8965 370.5313 -249.2715 C362.6611 -249.3916 358.5811 -245.7207 350.3467 -246.2031 C344.835 -246.9346 340.0176 -248.3613 335.0059 -249.5947 C339.8291 -247.582 345.0889 -246.0049 350.8311 -244.9121 C352.4463 -244.9121 354.0605 -244.9121 355.6758 -244.9121 C368.168 -249.4111 381.167 -244.7813 395.5605 -244.9121 C410.3691 -244.9053 423.9209 -246.1572 437.0605 -247.8184 Cf320.4736 -253.6318 m315.4824 -265.3809 311.4473 -279.4854 309.8154 -295.1318 C307.0225 -311.603 311.4258 -327.6592 313.0449 -342.1221 C309.4668 -332.5132 306.9492 -321.8433 305.2939 -310.311 C305.0234 -286.0859 311.4492 -268.5615 320.4736 -253.6318 Cf499.3916 -263.3203 m459.0498 -264.1016 430.4531 -278.3516 401.2129 -289.1572 C405.123 -285.208 412.0293 -282.8574 417.5215 -279.9521 C423.0986 -276.917 429.2305 -274.4365 435.2842 -271.8789 C448.0693 -267.4395 461.1719 -263.3174 478.0762 -262.9971 C485.0762 -262.5693 492.5527 -263.0508 499.3916 -263.3203 Cf274.291 -580.1416 m253.0928 -590.9932 211.8472 -587.5898 181.7632 -585.9531 C151.2061 -582.3867 123.3691 -576.0957 102.1543 -563.1855 C81.6328 -550 63.0825 -533.1602 64.8525 -498.7563 C69.1563 -468.9341 87.6685 -453.3184 106.353 -437.8789 C145.5542 -408.8311 193.0415 -388.0591 247.1621 -373.9336 C273.7031 -366.3491 299.6758 -358.1943 321.4424 -345.8364 C343.1846 -333.4536 357.3037 -313.4448 364.2344 -286.25 C364.3193 -286.1201 364.4023 -285.9883 364.3955 -285.7656 C364.5322 -285.7363 364.5479 -285.8291 364.5566 -285.9277 C364.7695 -286.9785 365.5488 -288.2383 365.2031 -289.3184 C358.4434 -315.9854 344.4521 -335.4204 323.2188 -347.6123 C302.499 -360.2656 277.0791 -368.2173 251.3604 -375.8706 C198.2412 -389.4966 151.7344 -409.7339 112.6504 -437.394 C94.1738 -452.3433 75.5024 -467.0991 69.5356 -494.5581 C66.7158 -510.6104 71.2896 -525.4111 77.771 -534.7646 C84.3081 -544.9141 93.0396 -552.8691 103.4463 -559.1475 C123.9927 -571.9736 151.0474 -578.292 180.6328 -582.0791 C210.291 -584.2646 248.1201 -586.2988 274.291 -580.1416 Cf478.5605 -300.1377 m455.3066 -297.9063 433.5889 -301.6768 414.6152 -306.1123 C416.542 -310.9136 417.2324 -316.9521 419.7822 -321.1299 C423.7461 -320.9072 426.6738 -318.3628 429.7939 -316.77 C427.0586 -320.1616 423.9609 -326.8403 417.1992 -325.167 C412.5137 -322.2114 412.2256 -314.1699 412.5166 -306.7583 C407.7139 -306.6987 401.1387 -310.3716 396.8525 -308.6958 C403.459 -304.6455 412.6592 -303.188 420.9121 -300.7837 C429.2979 -298.5112 438.2852 -296.8398 448.6865 -296.585 C459.7393 -296.0313 468.957 -298.7051 478.5605 -300.1377 Cf641.0088 -402.0303 m639.752 -388.9146 635.9834 -377.4512 628.5742 -371.0269 C629.3633 -371.0083 630.2764 -371.1133 630.835 -370.8647 C640.623 -374.7036 643.7871 -389.1338 641.0088 -402.0303 Cf597.2471 -374.4175 m597.2178 -374.2803 597.3105 -374.2651 597.4092 -374.2559 C603.6787 -375.4678 608.6035 -378.0249 611.9424 -382.1685 C618.0313 -397.2173 609.7822 -413.5386 600.3154 -420.1162 C599.2559 -420.2949 598.4805 -420.7573 597.0859 -420.6006 C607.1777 -415.1919 612.416 -399.0137 608.874 -384.5913 C606.416 -379.7813 600.1582 -378.7729 597.2471 -374.4175 Cf654.0879 -504.5698 m654.2754 -504.5435 654.376 -504.605 654.4111 -504.73 C655.9316 -511.3828 652.7432 -519.833 652.4727 -527.3369 C651.501 -535.0313 650.4824 -542.6787 649.4043 -550.2666 C647.4463 -565.6953 644.9092 -580.5439 643.1074 -596.127 C638.9102 -626.7021 634.7305 -657.293 630.5117 -687.8457 C622.2471 -749.0742 613.3525 -809.6611 608.5508 -874.3535 C608.0195 -875.6641 606.3535 -877.5225 605.6445 -877.583 C607.2168 -808.9668 617.0322 -748.5957 625.1836 -686.5557 C634.3535 -625.5889 641.1162 -562.2197 654.0879 -505.0527 C654.0879 -504.8921 654.0879 -504.73 654.0879 -504.5698 Cf417.6836 -743.5566 m409.8154 -737.0527 406.8691 -722.8281 404.6035 -709.6465 C402.7139 -695.6563 397.624 -684.8682 391.5234 -675.0898 C380.0586 -654.8525 367.2959 -635.9092 349.5391 -621.9639 C339.5459 -617.8555 330.2227 -613.0742 317.082 -612.1143 C302.2881 -610.749 290.2314 -613.3018 282.5264 -619.541 C288.3838 -614.1494 295.8633 -610.3789 307.2314 -610.498 C307.4932 -610.5439 307.5107 -610.3457 307.7168 -610.3369 C326.5107 -609.1973 338.1445 -615.2197 350.6699 -620.3486 C368.6201 -634.1025 382.0479 -652.3799 393.7842 -672.3447 C399.5166 -682.4912 405.9551 -691.9316 407.3486 -706.417 C409.3984 -720.1924 410.8086 -734.6064 417.6836 -743.5566 Cf272.8369 -613.082 m268.0381 -624.377 266.8809 -640.7139 264.9248 -655.3896 C264.5811 -638.9512 266.9043 -623.7813 272.8369 -613.082 Cf324.3486 -679.4502 m310.8203 -681.584 292.3652 -682.6973 278.8125 -679.7734 C292.4756 -677.3145 310.3252 -677.3057 324.3486 -679.4502 Cf266.7012 -678.8047 m266.8379 -678.7744 266.8535 -678.8672 266.8623 -678.9648 C269.6631 -688.0605 271.2012 -698.418 272.5146 -709 C272.958 -714.3457 273.4697 -720.3848 272.999 -726.1172 C272.1504 -730.9766 272.4238 -737.8125 268.6387 -739.1963 C267.8672 -738.2217 269.6992 -737.8887 269.6074 -736.6123 C271.0566 -717.2715 266.7734 -699.6719 265.8936 -681.0654 C266.0957 -680.2451 266.5352 -679.6602 266.7012 -678.8047 Cf328.709 -693.3359 m329.6416 -694.6113 330.3076 -696.1514 330.3232 -698.3428 C324.6426 -715.8623 292.6533 -707.5254 286.8857 -696.2441 C295.5723 -700.1523 303.6719 -704.6484 316.4365 -704.4785 C320.0557 -704.1152 323.2998 -703.377 325.8018 -701.8955 C327.29 -700.8535 328.5225 -699.5557 329.1934 -697.6973 C329.3359 -695.9385 328.7871 -694.873 328.709 -693.3359 Cf477.1074 -741.9424 m493.8223 -745.7793 504.7451 -761.3574 509.0801 -778.1133 C509.0801 -779.459 509.0801 -780.8047 509.0801 -782.1494 C508.0977 -787.251 505.4492 -790.6826 500.3604 -791.6777 C503.3896 -790.0781 505.6729 -787.7314 506.335 -783.7646 C505.8203 -772.5449 499.6895 -766.9424 495.3545 -759.543 C490.4541 -752.71 485.9473 -745.4824 477.5918 -742.1025 C477.4619 -742.0176 477.3291 -741.9346 477.1074 -741.9424 Cf477.5918 -845.9346 m478.3438 -846.9053 479.1162 -847.8545 479.6904 -849.002 C481.2354 -869.6006 480.333 -891.8799 478.7217 -911.6563 C475.2988 -891.8643 475.1123 -866.8945 477.5918 -845.9346 Cf498.584 -853.8467 m495.5898 -862.3486 491.1426 -873.2764 491.1563 -883.7197 C498.168 -887.2051 508.2412 -887.627 516.5078 -889.8555 C506.291 -889.6299 492.2744 -891.8047 487.1191 -885.9805 C486.501 -884.2314 486.1045 -882.3379 486.3115 -880.167 C489.0527 -870.0439 492.79 -860.917 498.584 -853.8467 Cf518.7686 -978.6689 m524.2178 -974.5381 531.9238 -972.6621 538.4688 -969.626 C545.2178 -966.7939 552.0527 -964.0488 559.1387 -961.5527 C573.1621 -956.4141 587.1494 -951.2393 601.123 -946.0508 C629.0137 -935.6152 655.0342 -923.3145 672.1738 -902.1279 C673.4873 -899.5664 675.0967 -897.3008 675.5645 -893.8936 C675.5996 -892.6201 675.5938 -891.3887 675.2412 -890.502 C664.9727 -879.1328 641.2051 -881.2607 621.3086 -879.5225 C625.9492 -878.8887 631.4346 -879.0977 636.6484 -879.0371 C636.9092 -879.083 636.9258 -878.8848 637.1318 -878.875 C653.5869 -879.0527 670.1211 -879.1514 677.6641 -888.2412 C677.6377 -888.4287 677.6992 -888.5283 677.8262 -888.5635 C678.2764 -889.9424 678.6602 -891.3887 678.7949 -893.085 C678.8467 -893.7314 678.5068 -893.9814 678.6328 -894.7002 C674.1729 -910.5879 661.1201 -917.8809 650.0518 -927.1582 C637.7266 -935.1797 624.1211 -941.9199 609.3574 -947.5039 C580.2031 -958.8252 550.5039 -970.4658 518.7686 -978.6689 Cf664.0996 -900.8359 m647.96 -901.71 630.9492 -900.8926 619.5313 -895.9922 C635.3213 -896.0264 650.998 -897.5752 664.0996 -900.8359 Cf425.4336 -927.4805 m427.873 -923.3516 434.332 -921.8467 438.999 -919.4072 C444.4541 -917.4893 450.2773 -915.9375 456.2764 -914.5625 C456.3838 -914.5625 456.4922 -914.5625 456.5996 -914.5625 C451.8018 -917.2998 447.0381 -920.0723 441.7432 -922.3135 C436.7842 -924.2021 430.7305 -927.5391 425.4336 -927.4805 Cf291.2451 -145.9258 m291.5508 -121.3057 303.084 -106.5244 314.498 -92.4756 C326.5732 -78.9297 341.0342 -67.7695 357.4521 -58.5664 C390.8945 -40.7666 431.376 -30.0049 481.9512 -29.3379 C532.8086 -29.0254 575.0957 -38.6777 605.8066 -59.0508 C637.2256 -78.8721 650.9541 -116.3877 661.0313 -157.5518 C661.3652 -158.2646 662.0869 -160.9111 661.8389 -160.6201 C661.3076 -159.5371 661.0068 -158.2217 660.5469 -157.0674 C659.6494 -154.7363 658.8613 -152.2939 657.9629 -149.9629 C656.3379 -145.1826 654.5215 -140.5928 652.957 -135.752 C649.46 -126.4395 646.3213 -116.7676 641.8154 -108.4629 C633.2842 -91.373 622.3965 -76.6387 607.582 -65.832 C578.3262 -43.8467 536.5771 -34.3506 486.3115 -33.375 C435.3154 -33.6758 394.1553 -43.8096 360.3584 -61.3115 C343.8896 -70.4639 329.0879 -81.2832 317.2432 -95.0605 C311.0107 -101.6377 305.9102 -109.3477 301.0957 -117.3438 C298.9785 -121.6318 296.8984 -125.957 295.2822 -130.7461 C293.0645 -134.9336 292.8301 -141.1045 291.2451 -145.9258 Cf297.3818 -173.0537 m291.7402 -202.2559 290.3311 -239.9355 292.8604 -274.1396 C293.4922 -279.5361 294.8027 -284.2549 296.4131 -288.6729 C297.1563 -290.5078 298.207 -292.7568 299.3203 -294.8086 c300.1738 -296.3848 302.2168 -299.4175 301.9033 -299.6533 C289.4902 -286.6602 287.7539 -262.9902 287.6934 -237.6455 C287.9248 -213.1172 291.3652 -191.7969 297.3818 -173.0537 Cf455.9531 -213.7471 m426.7881 -214.918 392.9814 -210.3369 368.4326 -216.8145 C368.0459 -216.7168 367.6953 -216.582 367.1406 -216.6523 C364.7783 -215.8389 363.0781 -214.3643 360.8428 -213.4229 C358.8164 -212.8662 356.6846 -212.4141 354.3838 -212.1318 C349.377 -212.0225 344.6348 -212.1787 340.4961 -212.9395 C338.4951 -213.3594 336.5313 -213.8174 334.5215 -214.2314 C332.9014 -214.832 333.458 -214.2568 334.6836 -213.9072 C335.6035 -213.6445 336.4902 -213.3457 337.4287 -213.1006 C344.2461 -210.8643 354.748 -209.2393 362.458 -211.6475 C364.4756 -212.4824 365.9424 -213.8682 368.4326 -214.2314 C393.502 -206.6338 428.3193 -212.251 455.9531 -213.7471 Cf350.8311 -292.5479 m343.5547 -296.1445 337.6719 -302.5337 328.2246 -304.4976 C332.2764 -298.3228 341.748 -294.7695 350.8311 -292.5479 Cf595.4717 -343.4141 m590.665 -335.4897 595.6348 -323.2939 600.3154 -318.7075 C600.5479 -318.6172 600.709 -318.4556 600.7998 -318.2231 C612.042 -305.6172 645.3955 -305.2783 656.5098 -318.2231 C669.9648 -329.8521 677.1738 -347.7246 680.8936 -369.0894 C684.5537 -392.2539 681.1025 -417.665 670.7197 -431.2578 C665.8125 -438.1812 659.3799 -445.1802 650.0518 -448.2134 c640.8047 -451.2192 625.8867 -451.4219 618.2393 -446.5986 C627.2109 -450.2886 642.1992 -448.0171 650.2119 -444.4995 C674.3555 -433.4673 681.5732 -393.2793 673.3047 -359.4004 C668.0889 -339.1006 659.9463 -321.731 641.6533 -314.5093 C632.0137 -311.0039 617.5371 -312.4443 609.5195 -316.4468 C600.7002 -320.3306 594.9258 -327.2588 594.502 -339.5386 C594.459 -341.0908 595.0947 -342.8193 595.4717 -343.4141 Cf345.1797 -323.229 m341.5313 -325.6631 338.0098 -329.6226 332.0996 -330.3345 C328.5078 -328.79 328.9521 -322.4556 330 -318.3848 C326.6211 -318.562 322.8203 -319.1646 319.666 -319.0308 C324.1836 -314.7539 336.5156 -312.9966 346.7939 -314.5093 C342.4199 -315.7329 338.1084 -317.019 333.2305 -317.7388 C333.3662 -320.6172 332.9111 -324.0864 333.5527 -326.4585 C337.2637 -325.8599 341.5215 -324.4175 345.1797 -323.229 Cf603.5459 -368.4434 m602.5918 -360.8428 607.3799 -354.8569 610.8115 -350.0347 C616.9639 -341.0508 633.0771 -343.978 640.2002 -350.0347 C636.0654 -349.0571 631.5117 -347.0977 626.4756 -346.4819 C612.7139 -347.6846 607.8008 -357.7349 603.5459 -368.4434 Cf488.0879 -371.9951 m477.334 -378.2505 469.7705 -387.6963 457.4072 -392.3423 C432.1396 -394.9976 411.7529 -386.083 400.5664 -371.9951 C399.8145 -370.3794 399.1494 -368.6763 398.9521 -366.5049 C398.8428 -364.5659 399.2139 -363.1074 399.4365 -361.4995 C400.1328 -360.0996 399.1934 -363.7065 399.4365 -364.8901 C399.6006 -366.5024 399.8799 -367.9995 400.4053 -369.25 C408.9199 -381.7817 425.292 -386.4556 443.1963 -389.5972 C465.7314 -392.5562 473.1152 -377.665 488.0879 -371.9951 Cf694.1348 -429.4819 m685.5137 -452.8335 673.2734 -473.9673 660.3848 -493.5894 C670.2793 -471.5103 682.2529 -450.1108 694.1348 -429.4819 Cf233.2749 -549.46 m247.3525 -532.3711 268.4385 -519.4941 299.1582 -517.9717 C322.7188 -519.3867 327.9063 -541.7588 336.9443 -556.0801 C328.3213 -545.4873 321.5596 -533.0332 309.6543 -525.7227 C307.1846 -524.8555 304.6543 -524.0469 301.7412 -523.623 C285.5361 -523.1875 273.6846 -527.1084 262.8262 -532.0205 C257.2598 -534.3682 252.2344 -537.2539 247.001 -539.9326 C241.9043 -542.4854 237.9438 -547.0156 233.2749 -549.46 Cf376.8291 -522.9775 m378.7197 -525.8242 380.6426 -530.0371 382.9658 -532.9893 C403.0498 -553.4893 437.1826 -559.9404 470.9707 -566.7383 C505.458 -572.7822 522.0381 -596.7354 544.2822 -615.0195 C528.6191 -603.8779 512.9785 -591.3135 497.292 -579.6563 C457.4063 -560.4941 394.1992 -564.6553 376.8291 -522.9775 Cf251.5225 -575.7803 m259.7715 -565.2822 275.9551 -560.3721 294.3145 -561.5703 C302.3311 -563.834 308.7549 -567.6914 315.3057 -571.4199 C306.1201 -569.1797 296.8955 -564.2764 284.3027 -565.9297 C273.5039 -567.5664 263.0547 -569.5498 254.4287 -573.3594 C253.1758 -573.8818 252.4844 -574.9668 251.5225 -575.7803 Cf464.835 -729.5088 m448.2354 -701.9893 439.0469 -665.4766 424.7881 -635.5283 c417.791 -620.8311 409.25 -605.8643 394.2686 -599.0332 c379.167 -592.1484 359.1885 -590.3066 336.2979 -590.4746 C321.7373 -590.8242 308.668 -592.665 296.5752 -595.4814 C290.4346 -596.7686 285.1738 -598.9365 280.5879 -601.7783 C278.2109 -603.1152 276.0391 -604.6572 274.1289 -606.4619 C272.9229 -607.1396 272.1152 -608.2148 271.0615 -609.0449 C270.5166 -609.417 270.1621 -609.9766 269.6074 -610.3369 C269.207 -611.001 268.4756 -611.3857 269.2852 -610.498 C282.498 -593.7295 307.9619 -589.2148 336.9443 -588.2139 C366.5254 -587.8643 393.7549 -591.2549 408.9639 -605.8154 C437.3887 -637.1357 448.7822 -686.3545 464.835 -729.5088 Cf277.0361 -656.8428 m275.9668 -659.3262 276.9717 -663.8838 276.3896 -666.8545 C275.3721 -664.2676 274.9619 -658.8467 275.9053 -655.874 C279.8555 -654.2568 282.043 -658.2568 285.2715 -658.9414 C288.4482 -653.9912 290.2627 -647.6787 298.3506 -647.6387 C298.6406 -647.6182 298.6914 -647.8359 298.9961 -647.7998 C308.4844 -653.1152 316.4678 -661.6553 323.7031 -668.1465 C315.2334 -662.0811 307.6738 -655.1104 298.3506 -649.8994 C290.3027 -649.7627 290.4443 -657.8174 285.7549 -661.042 C281.8496 -660.6406 280.7217 -657.4639 277.0361 -656.8428 Cf282.2031 -758.0898 m287.8818 -757.6035 293.4717 -756 295.4443 -751.3076 C294.2363 -744.7549 295.8066 -738.5605 298.8359 -734.8369 C299.9609 -734.2939 301.3057 -733.9697 302.8721 -733.8682 C320.8506 -735.5898 326.7412 -749.4004 340.6582 -755.1836 C348.2617 -754.7129 354.6387 -753.0146 360.3584 -750.6621 C363.4902 -748.5186 365.5625 -745.3154 368.2705 -742.749 C371.6787 -739.9131 376.2197 -738.21 381.1895 -736.9355 C381.8047 -736.7441 382.5898 -736.7217 383.127 -736.4521 C383.9639 -736.3525 384.6055 -736.2363 383.6113 -736.6123 C382.3271 -736.8896 381.374 -737.4971 380.0586 -737.7432 C378.0039 -738.8105 375.6807 -739.6094 373.7607 -740.8125 C368.7021 -743.8262 366.3223 -749.5215 361.9736 -753.2451 C355.9121 -756.2813 349.0938 -758.5586 340.6582 -759.2197 C324.7227 -754.9072 319.9658 -737.7256 300.9346 -737.5811 C297.8242 -741.0488 297.9502 -747.1328 297.543 -752.5996 C294.9912 -756.6963 288.7266 -760.5576 282.2031 -758.0898 Cf495.0313 -779.4053 m499.4229 -790.4395 492.5889 -804.6641 490.1875 -814.4453 C486.4199 -825.1035 480.8828 -833.9912 472.9092 -840.4443 C456.5176 -852.9951 433.2471 -859.3359 405.0879 -859.3369 c376.1914 -859.3379 358.0469 -848.1689 338.7207 -838.9902 C320.4229 -828.4375 298.167 -821.8428 287.0479 -804.1113 C264.7744 -807.3105 250.9072 -788.999 256.5283 -766.3252 C256.3418 -777.7607 259.2793 -786.0732 264.7637 -791.8389 C270.1729 -797.625 275.2109 -803.7832 286.5635 -803.627 C284.9863 -800.1973 281.7705 -797.0088 280.5879 -792.6465 C290.9131 -811.6865 311.2256 -820.0215 330.6465 -829.625 c350.1357 -839.2627 368.3105 -850.3936 393.623 -853.6855 C422.3428 -856.29 447.9307 -850.4844 465.4805 -839.7969 C474.3232 -834.1074 480.0342 -825.2852 485.0195 -815.7373 C488.7842 -805.0225 494.2783 -796.0391 495.6777 -782.958 C495.4639 -781.9326 495.5254 -780.6328 495.1924 -779.7285 C495.2188 -779.54 495.1572 -779.4404 495.0313 -779.4053 Cf445.457 -905.5195 m438.9619 -909.4668 430.8398 -913.1846 424.627 -917.9531 C418.6504 -923.1729 411.0391 -926.7568 409.2861 -936.2002 C409.3721 -936.3301 409.4551 -936.4629 409.4482 -936.6846 C415.1816 -946.1299 427.4814 -949.0088 437.0605 -954.6094 C447.2256 -959.5684 457.4609 -964.459 466.6113 -970.4346 C447.1416 -959.7061 419.2988 -955.9551 405.8955 -938.6221 C405.4004 -936.6436 405.2188 -934.0879 406.0566 -932.3252 C413.9414 -918.1416 429.835 -911.9668 445.457 -905.5195 Cf666.8438 -224.2432 m667.0059 -224.2432 667.167 -224.2432 667.3291 -224.2432 C676.7979 -254.6582 688.4404 -282.9014 695.2646 -315.9624 C686.1182 -287.8594 674.1826 -262.5508 668.1357 -231.3477 C667.7656 -231.6768 668.0781 -232.6885 667.9746 -233.2852 C667.5186 -230.5391 666.4814 -226.7432 666.8438 -224.2432 CfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF